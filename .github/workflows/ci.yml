name: CI

on:
  push:
    branches: [ main, develop, 'feat/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run TypeScript type checking
        run: npm run typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
        storage-type: [json, sqlite]
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        env:
          STORAGE_TYPE: ${{ matrix.storage-type }}
        run: |
          if [[ "${{ matrix.node-version }}" == "20" && "${{ matrix.storage-type }}" == "sqlite" ]]; then
            npm run test:coverage
          else
            npm test
          fi
      
      - name: Upload coverage reports
        if: matrix.node-version == 20 && matrix.storage-type == 'sqlite'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == 20 && matrix.storage-type == 'sqlite'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: mcp-memory-enhanced
          fail_ci_if_error: false
      
      - name: Generate coverage summary
        if: matrix.node-version == 20 && matrix.storage-type == 'sqlite'
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npx c8 report --reporter=text-summary | tail -n 5 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Check coverage thresholds
        if: matrix.node-version == 20 && matrix.storage-type == 'sqlite'
        run: |
          npx c8 check-coverage --lines 85 --functions 85 --branches 80 || echo "::warning::Coverage below threshold"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-type-check]
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "Build failed: dist/index.js not found"
            exit 1
          fi
          echo "Build successful!"

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.standalone
          platforms: linux/amd64
          tags: mcp-memory-enhanced:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          load: true
      
      - name: Test Docker image - stdio mode
        run: |
          # Test basic functionality with stdio mode (default)
          docker run --rm -e STORAGE_TYPE=sqlite mcp-memory-enhanced:test node dist/index.js --version
          
          # Test that the container can start and respond to health checks in stdio mode
          docker run --rm -e STORAGE_TYPE=sqlite -e PORT=6970 -p 6970:6970 -d --name test-stdio mcp-memory-enhanced:test
          sleep 5
          curl -f http://localhost:6970/health || exit 1
          docker stop test-stdio
      
      - name: Test Docker image - HTTP mode
        run: |
          # Test HTTP transport mode with explicit command to ensure proper startup
          docker run --rm -e STORAGE_TYPE=sqlite -e TRANSPORT_TYPE=http -e HTTP_PORT=3000 -p 3000:3000 -d --name test-http mcp-memory-enhanced:test node dist/index.js
          sleep 10
          # Try health check on HTTP port
          curl -f http://localhost:3000/health || {
            echo "Health check failed, checking container logs..."
            docker logs test-http
            docker stop test-http || true
            exit 1
          }
          docker stop test-http

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.standalone
          platforms: linux/amd64
          tags: mcp-memory-enhanced:scan
          push: false
          load: true
      
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'mcp-memory-enhanced:scan'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'