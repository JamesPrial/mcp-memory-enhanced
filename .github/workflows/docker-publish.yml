name: Docker Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.standalone
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ghcr.io/jamesprial/mcp-memory-enhanced:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request' && success()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  create-unraid-template:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Update UnRAID template with new version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s|<Repository>.*</Repository>|<Repository>${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}</Repository>|" unraid-template.xml
          sed -i "s|<DateInstalled>.*</DateInstalled>|<DateInstalled>$(date +%s)</DateInstalled>|" unraid-template.xml
      
      - name: Upload UnRAID template
        uses: actions/upload-artifact@v4
        with:
          name: unraid-template-${{ github.ref_name }}
          path: unraid-template.xml
      
      - name: Create or update release with UnRAID template
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release exists, create if it doesn't
          if ! gh release view ${{ github.ref_name }} > /dev/null 2>&1; then
            echo "Creating release ${{ github.ref_name }}"
            gh release create ${{ github.ref_name }} \
              --title "Release ${{ github.ref_name }}" \
              --notes "Docker image available at: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          fi
          # Upload the UnRAID template
          gh release upload ${{ github.ref_name }} unraid-template.xml --clobber